
                                                                                                ESCAPE SEQUENCE CHARACTERS

Escape sequence characters in Python are special combinations of characters that begin with a backslash (`\`) and 
represent certain whitespace, formatting, or control characters.
They're used inside strings to insert things like new lines, tabs, or special symbols.

| Escape Sequence | Meaning                          | Example Output               |
|-----------------|----------------------------------|------------------------------|
| `\n`            | New line                         | `"Hello\nWorld"` ‚Üí Hello<br>World |
| `\t`            | Horizontal tab                   | `"Hello\tWorld"` ‚Üí Hello   ‚ÄÉWorld |
| `\\`            | Backslash                        | `"C:\\Users"` ‚Üí C:\Users     |
| `\'`            | Single quote                     | `'It\'s fine'` ‚Üí It's fine   |
| `\"`            | Double quote                     | `"She said \"Hi\""` ‚Üí She said "Hi" |
| `\r`            | Carriage return                  | `"Hello\rWorld"` ‚Üí World     |
| `\b`            | Backspace                        | `"Hell\blo"` ‚Üí Helo          |
| `\f`            | Form feed                        | `"Hello\fWorld"` ‚Üí HelloWorld |
| `\a`            | Bell (alert sound)               | `"Hello\a"` ‚Üí (may beep)     |
| `\v`            | Vertical tab                     | `"Hello\vWorld"` ‚Üí HelloWorld |
| `\ooo`          | Octal value                      | `"\101"` ‚Üí A                 |
| `\xhh`          | Hexadecimal value                | `"\x41"` ‚Üí A                 |

---

### üß™ Example in Code
```python
print("Line1\nLine2")
print("Tabbed\tText")
print("Quote: \"Hello\"")
```

                                                                                                   VARIABLES IN PYTHON 


### üß† What is a Variable?
A **variable** is a name that refers to a value stored in memory. You can assign a value to a variable using the `=` operator.

```python
name = "Alice"       # string variable
age = 30             # integer variable
height = 5.6         # float variable
is_student = True    # boolean variable
```

### üî§ Rules for Naming Variables
- Must start with a letter or underscore (`_`)
- Can contain letters, numbers, and underscores
- Cannot start with a number
- Case-sensitive (`Name` and `name` are different)

### üì¶ Types of Variables
Python is dynamically typed, so you don‚Äôt need to declare the type explicitly:
- `int` ‚Äì whole numbers (`10`, `-3`)
- `float` ‚Äì decimal numbers (`3.14`, `-0.5`)
- `str` ‚Äì text (`"hello"`, `'world'`)
- `bool` ‚Äì logical values (`True`, `False`)
- `list`, `tuple`, `dict`, `set` ‚Äì collections

### üîÅ You Can Reassign Variables
```python
x = 5
x = "hello"  # now x is a string
```

                                                                                                 DATATYPES IN PYTHON


### üî¢ 1. **Numeric Types**
- `int` ‚Äì Integer numbers
- `float` ‚Äì Floating-point numbers
- `complex` ‚Äì Complex numbers

### üìÑ 2. **Text Type**
- `str` ‚Äì String (text)

### ‚úÖ 3. **Boolean Type**
- `bool` ‚Äì True or False

### üì¶ 4. **Sequence Types**
- `list` ‚Äì Ordered, mutable collection
- `tuple` ‚Äì Ordered, immutable collection
- `range` ‚Äì Sequence of numbers used in loops

### üóÇÔ∏è 5. **Set Types**
- `set` ‚Äì Unordered collection of unique elements
- `frozenset` ‚Äì Immutable version of a set

### üîë 6. **Mapping Type**
- `dict` ‚Äì Key-value pairs

### üß™ 7. **Binary Types**
- `bytes` ‚Äì Immutable sequence of bytes
- `bytearray` ‚Äì Mutable sequence of bytes
- `memoryview` ‚Äì Memory view object

### üö´ 8. **Special Type**
- `NoneType` ‚Äì Represents the absence of a value (`None`)

                                                                                        
                                                                                                        OPERATORS


### üî¢ **Arithmetic Operators**
Used for basic mathematical operations:
- `+` : Addition (`a + b`)
- `-` : Subtraction (`a - b`)
- `*` : Multiplication (`a * b`)
- `/` : Division (`a / b`)
- `//` : Floor Division (`a // b`)
- `%` : Modulus (remainder) (`a % b`)
- `**` : Exponentiation (`a ** b`)

---

### üßÆ **Comparison Operators**
Used to compare values:
- `==` : Equal to (`a == b`)
- `!=` : Not equal to (`a != b`)
- `>` : Greater than (`a > b`)
- `<` : Less than (`a < b`)
- `>=` : Greater than or equal to (`a >= b`)
- `<=` : Less than or equal to (`a <= b`)

---

### üîÄ **Logical Operators**
Used to combine conditional statements:
- `and` : Returns `True` if both statements are true
- `or` : Returns `True` if at least one statement is true
- `not` : Reverses the result (`not True` is `False`)

---

### üì¶ **Assignment Operators**
Used to assign values to variables:
- `=` : Assign (`x = 5`)
- `+=` : Add and assign (`x += 3`)
- `-=` : Subtract and assign (`x -= 2`)
- `*=` : Multiply and assign (`x *= 4`)
- `/=` : Divide and assign (`x /= 2`)
- `//=` : Floor divide and assign
- `%=` : Modulus and assign
- `**=` : Exponentiate and assign

---

### üß† **Bitwise Operators**
Operate on bits:
- `&` : AND
- `|` : OR
- `^` : XOR
- `~` : NOT
- `<<` : Left shift
- `>>` : Right shift

---

### üìö **Membership Operators**
Check for membership in a sequence:
- `in` : Returns `True` if value is found
- `not in` : Returns `True` if value is not found

---

### üß¨ **Identity Operators**
Compare memory locations:
- `is` : Returns `True` if both variables point to the same object
- `is not` : Returns `True` if they do not


                                                                                         TYPE CASTING IN PYTHON


Type casting in Python refers to converting the data type of a variable from one type to another.
It's useful when you need to perform operations that require specific data types or when you're handling user input.

### üîÑ Types of Type Casting

#### 1. **Implicit Type Casting**
Python automatically converts one data type to another when it's safe to do so.

```python
x = 10       # int
y = 2.5      # float
result = x + y  # Python converts x to float
print(result)   # Output: 12.5
```

#### 2. **Explicit Type Casting**
You manually convert a variable to a different type using built-in functions.

```python
# int to float
a = 5
b = float(a)
print(b)  # Output: 5.0

# float to int
c = 3.9
d = int(c)
print(d)  # Output: 3

# string to int
e = "42"
f = int(e)
print(f)  # Output: 42

# int to string
g = 100
h = str(g)
print(h)  # Output: "100"
```

### ‚ö†Ô∏è Things to Watch Out For
- Converting a string to an int or float only works if the string is numeric.
- Converting a float to an int will **truncate** the decimal part, not round it.










