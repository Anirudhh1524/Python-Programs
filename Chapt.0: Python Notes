
DIFFERENCE: modules, libraries, packages, and frameworks


Module
1. A **module** is the smallest unit of code reuse.
2. It’s typically a single file (like `math.py`) containing functions, classes, or variables.
3. Used to organize code into logical chunks.
Example: `os.py`, `random.py` in Python.

Library
1. A **library** is a collection of modules or packages that provide specific functionality.
2. You call its functions to perform tasks—**you control the flow**.
- **Example**: `NumPy` for numerical computing, `Lodash` in JavaScript.

Package
1. A **package** is a directory that contains multiple modules and an `__init__.py` file (in Python).
2. It helps organize related modules into a namespace.
3. Can include sub-packages.
- **Example**: `requests` package in Python.

Framework
1. A **framework** is a structured platform for building applications.
2. It includes libraries, tools, and rules for development.
3. **It controls the flow**—you fill in the details (known as *Inversion of Control*).
- **Example**: `Django` for web apps in Python, `React` for UI in JavaScript.


Summary Table

| Term       | Scope                      | Control Flow          | Example           |
|------------|----------------------------|-----------------------|-----------------  |
| Module     | Single file                | You control           | `math.py`         |
| Package    | Folder of modules          | You control           | `requests`        |
| Library    | Collection of modules/packages | You control       | `NumPy`, `Lodash` |
| Framework  | Full development structure | Framework controls    | `Django`, `React` |

                                                                                               SHORTCUTS FOR VS-CODE


Basic Editing
1.	Cut line: Ctrl + X
2.	Copy line: Ctrl + C
3.	Paste: Ctrl + V
4.	Delete line: Ctrl + Shift + K
5.	Insert line below: Ctrl + Enter
6.	Insert line above: Ctrl + Shift + Enter
7.	Move line up/down: Alt + ↑ / ↓
8.	Copy line up/down: Shift + Alt + ↑ / ↓

Navigation & Selection
1.	Go to beginning/end of line: Home / End
2.	Go to top/bottom of file: Ctrl + Home / End
3.	Select current line: Ctrl + L
4.	Select all occurrences of word: Ctrl + F2
5.	Jump to matching bracket: Ctrl + Shift + \

Formatting & Commenting
1.	Indent/Outdent line: Ctrl + ] / [
2.	Comment/Uncomment line(s): Ctrl + /
3.	Block comment: Ctrl + K, then Ctrl + C
4.	Unblock comment: Ctrl + K, then Ctrl + U

Python-Specific Shortcuts (with Python extension)
1.	Run Python file: Ctrl + F5
2.	Run selected code in terminal: Shift + Enter
3.	Format document (with Black or autopep8): Shift + Alt + F
4.	Go to definition: F12
5.	Peek definition: Alt + F12
6.	Rename symbol: F2

Explorer & Terminal
1.	Toggle terminal: Ctrl + `
2.	Open command palette: Ctrl + Shift + P
3.	Open settings: Ctrl + ,

You can find the full list of shortcuts and customize them in VS Code via:
•	File → Preferences → Keyboard Shortcuts

                                                                                     do_while loop

Python doesn't have a built-in do-while loop like some other languages (e.g., C++, Java), but you can emulate its behavior using a while True loop combined with a break statement. The key idea is to ensure the loop body runs at least once, and then check the condition at the end of each iteration.
 Simulating a Do-While Loop in Python
while True:
    # Code block that should run at least once
    user_input = input("Enter a positive number: ")
    number = int(user_input)
    print(f"You entered: {number}")

    # Condition check to break the loop
    if number <= 0:
        break
 Explanation:
1.	The loop starts unconditionally (while True).
2.	The body runs once before any condition is checked.
3.	After executing, it checks if the condition to continue is met.
4.	If not, break exits the loop.
Use Cases
1.	Validating user input
2.	Menu-driven programs
3.	Repeating tasks until a stop condition is met

















