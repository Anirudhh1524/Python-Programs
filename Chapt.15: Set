a set is a built-in data type used to store a collection of unique and unordered elements. 

Key Characteristics of Sets
•	No duplicates: Each element in a set must be unique.
•	Unordered: The items have no defined order and cannot be accessed via index.
•	Mutable: You can add or remove elements, but the elements themselves must be immutable (e.g., numbers, strings, tuples).
•	Efficient operations: Sets are optimized for fast membership testing, union, intersection, and difference operations.
Creating a Set
# Basic set creation
my_set = {1, 2, 3, 4}
print(my_set)  # Output: {1, 2, 3, 4}

# Using the set() constructor

another_set = set([1, 2, 2, 3])
print(another_set)  # Output: {1, 2, 3}

Common Set Methods
Method          	Description
add(x)	          Adds element x to the set
remove(x)	        Removes element x; raises error if missing
discard(x)	      Removes element x if present
pop()	            Removes and returns an arbitrary element
clear()	          Removes all elements
union(set2)	      Returns a new set with elements from both
intersection(set2)Returns common elements
difference(set2)	Returns elements in set1 not in set2
issubset(set2)	  Checks if set1 is subset of set2

Example Usage
a = {1, 2, 3}
b = {3, 4, 5}

print(a.union(b))         # {1, 2, 3, 4, 5}
print(a.intersection(b))  # {3}
print(a.difference(b))    # {1, 2}

Sets are especially handy when you need to eliminate duplicates or perform mathematical set operations like unions and intersections.




