OPERATORS

 **Arithmetic Operators**
Used for basic mathematical operations:
1.	`+` : Addition (`a + b`)
2.	`` : Subtraction (`a  b`)
3.	`*` : Multiplication (`a * b`)
4.	`/` : Division (`a / b`)
5.	`//` : Floor Division (`a // b`)
6.	`%` : Modulus (remainder) (`a % b`)
7.	`**` : Exponentiation (`a ** b`)


**Comparison Operators**
Used to compare values:
1.	`==` : Equal to (`a == b`)
2.	`!=` : Not equal to (`a != b`)
3.	`>` : Greater than (`a > b`)
4.	`<` : Less than (`a < b`)
5.	`>=` : Greater than or equal to (`a >= b`)
6.	`<=` : Less than or equal to (`a <= b`)


**Logical Operators**
Used to combine conditional statements:
1.	`and` : Returns `True` if both statements are true
2.	`or` : Returns `True` if at least one statement is true
3.	`not` : Reverses the result (`not True` is `False`)


**Assignment Operators**
Used to assign values to variables:
1.	`=` : Assign (`x = 5`)
2.	`+=` : Add and assign (`x += 3`)
3.	`=` : Subtract and assign (`x = 2`)
4.	`*=` : Multiply and assign (`x *= 4`)
5.	`/=` : Divide and assign (`x /= 2`)
6.	`//=` : Floor divide and assign
7.	`%=` : Modulus and assign
8.	`**=` : Exponentiate and assign


**Bitwise Operators**
Operate on bits:
1.	`&` : AND
2.	`|` : OR
3.	`^` : XOR
4.	`~` : NOT
5.	`<<` : Left shift
6.	`>>` : Right shift

**Membership Operators**
Check for membership in a sequence:
1.	`in` : Returns `True` if value is found
2.	`not in` : Returns `True` if value is not found

**Identity Operators**
Compare memory locations:
1.	`is` : Returns `True` if both variables point to the same object
2.	`is not` : Returns `True` if they do not


TYPE CASTING IN PYTHON


Type casting in Python refers to converting the data type of a variable from one type to another.
It's useful when you need to perform operations that require specific data types or when you're handling user input.

Types of Type Casting

1. **Implicit Type Casting**
Python automatically converts one data type to another when it's safe to do so.

python
x = 10       # int
y = 2.5      # float
result = x + y  # Python converts x to float
print(result)   # Output: 12.5


2. **Explicit Type Casting**
You manually convert a variable to a different type using builtin functions.

python
# int to float
a = 5
b = float(a)
print(b)  # Output: 5.0

# float to int
c = 3.9
d = int(c)
print(d)  # Output: 3

# string to int
e = "42"
f = int(e)
print(f)  # Output: 42

# int to string
g = 100
h = str(g)
print(h)  # Output: "100"

Converting a string to an int or float only works if the string is numeric.
Converting a float to an int will **truncate** the decimal part, not round it.
